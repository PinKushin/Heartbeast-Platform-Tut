<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Player Variables
spd = 5;
hspd = 0;
vspd = 0;
grav = 1.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Player
var right = keyboard_check (ord ( "D"));
var left = keyboard_check (ord ( "A"));
var up = keyboard_check (vk_space);
var uprelease = keyboard_check_released (vk_space)

if !place_meeting (x, y + 1, oSolid) {
    vspd += grav;
    
    //Control Jump height
    if uprelease &amp;&amp; vspd &lt; -6 {
        vspd = -4;
    }
}else{
    vspd = 0;
    /// Jump Code
        if up {
        vspd = -10
    }
}

if  left {
    hspd = -spd;
}
if  right {
    hspd = spd;
}
//Friction
if !right &amp;&amp; !left {
    hspd = 0
}

//Horizontal collisions
if place_meeting (x + hspd, y, oSolid){
    while !place_meeting (x + sign (hspd), y, oSolid) {
        x += sign (hspd);
    }
    hspd = 0;
}
x += hspd;


//Vertical collisions
if place_meeting (x, y + vspd, oSolid){
     while !place_meeting (x , y+ sign (vspd), oSolid) {
        y += sign (vspd);
    }
    vspd = 0
}
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
